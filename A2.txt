import tensorflow as tf
pip install matplotlib
pip install pandas
import tensorflow as tf 
from tensorflow import keras
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import random
from tensorflow.keras.models import Sequential 
from tensorflow.keras.optimizers import Adam 
from tensorflow.keras.layers import Flatten,Dense,Conv2D,MaxPooling2D
from tensorflow.keras.utils import to_categorical
mnist_train = pd.read_csv('mnist_train.csv')
mnist_test = pd.read_csv('mnist_test.csv')
x_train = mnist_train.iloc[:,1:].values
y_train = mnist_train.iloc[:,0].values
x_test = mnist_test.iloc[:, 1:].values
y_test = mnist_test.iloc[:, 0].values
x_train = x_train/255.0
x_test = x_test/255.0
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128,activation="relu"),
    keras.layers.Dense(10,activation="softmax")
])
model.compile(optimizer="sgd",loss="sparse_categorical_crossentropy",metrics=['accuracy'])
x_train = x_train.reshape(-1,28,28)
x_test = x_test.reshape(-1,28,28)
print(x_train.shape)
print(x_test.shape)
history = model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=10)
test_loss, test_acc = model.evaluate(x_test,y_test)
print("loss=%.3f" %test_loss)
print("Accuracy=%.3f" %test_acc)
n = random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()
predicted_value=model.predict(x_test)
plt.imshow(x_test[n])
plt.show()
print('Predicted value:',predicted_value[n])
predicted_number = np.argmax(predicted_value[n])

print('Predicted vlaue:', predicted_number)
history.history??
history.history.keys()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.title('model_accuracy')
plt.legend(['Train','Validation'])
plt.show()
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train','Validation'],loc='upper right')
plt.show()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Training Loss and accuracy')
plt.ylabel('accuracy/Loss')
plt.xlabel('epoch')
plt.legend(['accuracy', 'val_accuracy', 'loss', 'val_loss'])      
plt.show()
